?n()
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
Metrics()$dat %>% select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction) %>%
summarise(count=n(replicate_sample))
Metrics()$dat %>% select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction,replicate_sample) %>%
summarise(count=n(replicate_sample))
Metrics()$dat %>% select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction,replicate_sample) %>%
summarise(n(replicate_sample))
Metrics()$dat %>% select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction,replicate_sample) %>%
summarise(sum(replicate_sample))
Metrics()$dat %>% select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction,replicate_sample) %>%
summarise(n())
Metrics()$dat %>%
select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction,replicate_sample) %>%
summarise(count=n())
?reshape::cast
?reshape::cast
?tidyr::gather
?tidyr::pivot_longer
?tidyr::pivot_wider
mydf = data.frame(method = rep(c('a','b'),each=4), dfr = rep(c(.1,.2),4), count = rep(3,8))
mydf
tidyr::pivot_wider(mydf,id_cols=method)
tidyr::pivot_wider(mydf,id_cols=c(dfr,count))
tidyr::pivot_wider(mydf,names_from=method,values_from = count)
tidyr::pivot_wider(mydf,names_from=method)
mydf %>% tidyr::pivot_wider(names_from=method)
mydf %>% tidyr::pivot_wider(names_from=method,values_from=count)
mydf
mydf$obs = 1:8
mydf
tidyr::pivot_wider(names_from=method,values_from=count)
tidyr::pivot_wider(mydf,names_from=method,values_from=count)
tidyr::pivot_wider(mydf,names_from=method,values_from=count,id_cols=obs)
tidyr::pivot_wider(mydf,names_from=method,values_from=count,id_cols=dfr)
mydf
runApp('CellCounting/AppV1/Shiny app.R')
outdf = Metrics()$dat %>%
select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction,replicate_sample) %>%
summarise(count=n())
outdf
outdf = Metrics()$dat %>%
select(counting_method,target_dilution_fraction) %>%
group_by(counting_method,target_dilution_fraction) %>%
summarise(count=n())
outdf
outdf = Metrics()$dat %>%
select(counting_method,target_dilution_fraction) %>%
group_by(counting_method,target_dilution_fraction) %>%
summarise(count=n())
outdf
)
sdfa
Q
runApp('CellCounting/AppV1/Shiny app.R')
Metrics()$dat %>%
select(counting_method,target_dilution_fraction) %>%
group_by(counting_method,target_dilution_fraction) %>%
summarise(count=n())
mydf
mydf = data.frame(method=c('a','a','b','b'),tdf=c(.1,.2,.1,.2),count=c(2,3,2,3))
mydf
tidyr::pivot_wider(mydf,names_from=method,values_from=count)
Metrics()$dat %>%
select(counting_method,target_dilution_fraction) %>%
group_by(counting_method,target_dilution_fraction) %>%
summarise(count=n()) %>%
tidyr::pivot_wider(names_from=counting_method,values_from=count)
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
Metrics()$dat %>%
select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction,replicate_sample) %>%
summarise(count=n()) %>%
tidyr::pivot_wider(names_from=counting_method,values_from=count)
Metrics()$dat %>%
select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction,replicate_sample) %>%
summarise(count=n())
Metrics()$dat %>%
select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction) %>%
summarise(count=n(replicate_sample))
Metrics()$dat %>%
select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction) %>%
summarise(count=length(replicate_sample))
Metrics()$dat %>%
select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction) %>%
summarise(count=length(replicate_sample)) %>%
tidyr::pivot_wider(names_from=counting_method,values_from=count)
runApp('CellCounting/AppV1/Shiny app.R')
Metrics()$dat %>%
select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction,replicate_sample) %>%
summarise(count=n()) %>%
tidyr::pivot_wider(names_from=counting_method,values_from=count)
Metrics()$dat %>%
select(counting_method,target_dilution_fraction,replicate_sample) %>%
group_by(counting_method,target_dilution_fraction,replicate_sample) %>%
summarise(count=n()) %>%
tidyr::pivot_wider(names_from=counting_method,values_from=count,
values_fill=0)
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
install.packages('DT')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
?DT::renderDataTable
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
?he
?h3
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
?arrange
runApp('CellCounting/AppV1/Shiny app.R')
metrics
names(metrics)
metrics$Title
metrics$metrics %>% head()
plot.metrics
plot.metrics<- metrics$metrics[ metrics$metrics$Metric%in%c(
"R.squared","Scaled.Sum.of.Squares",
"Sum.of.Squares","Scaled.Absolute.Value",
"Absolute.Value","Smoothed.R.squared","Smoothed.Scaled.Sum.of.Squares",
"Smoothed.Sum.of.Squares","Smoothed.Scaled.Abs..Value",
"Smoothed.Absolute.Value"),]
metrics$metrics.plot
metrics$metrics.plot
runApp('CellCounting/AppV1/Shiny app.R')
input$perf.metrics
c(1,2,3)[input$perf.metrics]
c(1,2,3)[as.numeric(input$perf.metrics)]
runApp('CellCounting/AppV1/Shiny app.R')
?facet_wrap
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
metrics$metrics
metrics$metrics %>% head()
metrics$metrics$Metric %>% unique()
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
a <- b <- NULL
a
b
runApp('CellCounting/AppV1/Shiny app.R')
grouping_factors
n_compare
n_levels
n_comparison_facs
factor_to_compare
factor_to_compare
metrics$overview.plot
metrics$overview.plot2
metrics$metrics %>% head()
Q
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
c(NULL, 1)
runApp('CellCounting/AppV1/Shiny app.R')
factor_to_compare
n_comparison_facs
metrics$metrics %>% head()
boot.metrics
metrics$metrics %>% head()
metrics$Title
metrics$Title
factor_to_compare
metrics$metrics$comp_factor<-metrics$metrics[,factor_to_compare]
metrics$metrics$comp_factor
metrics_to_plot
comp_factor
plot.metrics %>% head()
ggplot(plot.metrics,aes(x=comp_factor,y=Value,color=comp_factor))+
facet_wrap(~Metric,scales="free_y")+
geom_point(size=2)+
ylab("")+xlab("")+
theme_bw()+
guides(color=FALSE)+
theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=.5)) +
theme(aspect.ratio=1)
ggplot(plot.metrics,aes(x=comp_factor,y=Value))+
facet_wrap(~Metric,scales="free_y")+
geom_point(size=2)+
ylab("")+xlab("")+
theme_bw()+
guides(color=FALSE)+
theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=.5)) +
theme(aspect.ratio=1)
ggplot(plot.metrics,aes(y=Value))+
facet_wrap(~Metric,scales="free_y")+
geom_point(size=2)+
ylab("")+xlab("")+
theme_bw()+
guides(color=FALSE)+
theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=.5)) +
theme(aspect.ratio=1)
head(plot.metrics)
factor_to_compare
grouping_factors
ggplot(plot.metrics,aes(x=counting_method,y=Value))+
facet_wrap(~Metric,scales="free_y")+
geom_point(size=2)+
ylab("")+xlab("")+
theme_bw()+
guides(color=FALSE)+
theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=.5)) +
theme(aspect.ratio=1)
metrics$metrics.plot<-ggplot(plot.metrics,aes(x=comp_factor,y=Value,color=comp_factor))+
facet_wrap(~Metric,scales="free_y")+
geom_point(size=2)+
ylab("")+xlab("")+
theme_bw()+
guides(color=FALSE)+
theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=.5)) +
theme(aspect.ratio=1)
metrics$metrics.plot<-metrics$metrics.plot+
geom_pointrange(data=plot.metrics,
aes(x=comp_factor,y=Value,color=comp_factor,ymin=lower,ymax=upper))
metrics$metrics.plot
ggplot(plot.metrics,aes(x=comp_factor,y=Value,color=comp_factor))+
facet_wrap(~Metric,scales="free_y")+
geom_point(size=2)+
ylab("")+xlab("")+
theme_bw()+
guides(color=FALSE)+
theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=.5)) +
theme(aspect.ratio=1)
comp_factor
plot.metrics
runApp('CellCounting/AppV1/Shiny app.R')
plot.metrics
ggplot(plot.metrics,aes(x=comp_factor,y=Value,color=comp_factor))+
facet_wrap(~Metric,scales="free_y")+
geom_point(size=2)+
ylab("")+xlab("")+
theme_bw()+
guides(color=FALSE)+
theme(axis.text.x = element_text(angle = 90, hjust = 1,vjust=.5)) +
theme(aspect.ratio=1)
metrics$means_plot
n
Q
runApp('CellCounting/AppV1/Shiny app.R')
metrics$metrics.plot
metrics$means_plot
metrics$cv_plot
n.met
runApp('CellCounting/AppV1/Shiny app.R')
metrics$compare
n.met
x = list()
x$y = NULL
x
x = list(z = 1)
x
x$y = NULL
x
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
Metrics() %>% names()
Metrics()$metrics %>% head()
Metrics()$metrics %>% head()
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
out_df <- Metrics()$metrics %>% dplyr::select(counting_method,
Metric, Value, lower, upper)
colnames(out_df) <- c("Counting Method", "Type of PI", "PI",
"Lower", "Upper")
out_df
typeof(out_df)
out_df <- Metrics()$metrics %>% dplyr::select(counting_method,
Metric, Value, lower, upper)
colnames(out_df) <- c("Counting Method", "Type of PI", "PI",
"Lower", "Upper") %>% as.data.frame()
out_df
typeof(Metrics()$metrics)
out_df <- Metrics()$metrics %>% as.data.frame() %>% dplyr::select(counting_method,
Metric, Value, lower, upper)
colnames(out_df) <- c("Counting Method", "Type of PI", "PI",
"Lower", "Upper")
out_df
typeof(out_df)
out_df <- Metrics()$metrics %>% as.data.frame() %>% dplyr::select(counting_method,
Metric, Value, lower, upper)
out_df %>% head()
typeof(out_df)
class(out_df)
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
round(c(.123,.1234,.12345),3)
runApp('CellCounting/AppV1/Shiny app.R')
x = list()
x$y
is.null(x$T)
runApp('CellCounting/AppV1/Shiny app.R')
?dplyr::filter
c('a','b') %in% c('c','a','x')
runApp('CellCounting/AppV1/Shiny app.R')
Metrics()$metrics %>% as.data.frame() %>% dplyr::select(counting_method,
Metric, Value, lower, upper) %>% dplyr::filter(Metric %in%
c("Prop.Const.x", Metric$metrics_to_plot))
Metrics()$metrics %>% as.data.frame() %>% head()
Metrics()$metrics %>% as.data.frame() %>% dplyr::select(counting_method,
Metric, Value, lower, upper) %>% dplyr::filter(Metrics()$metric$Metric %in%
c("Prop.Const.x", Metric$metrics_to_plot))
Metrics()$metrics %>% as.data.frame() %>% dplyr::select(counting_method,
Metric, Value, lower, upper) %>% dplyr::filter(Metrics()$metric$Metric %in%
c("Prop.Const.x", Metric()$metrics_to_plot))
Metrics()$metrics_to_plot
Metrics()$metrics %>% as.data.frame() %>% dplyr::select(counting_method,
Metric, Value, lower, upper) %>% dplyr::filter(Metric %in%
c("Prop.Const.x", Metric()$metrics_to_plot))
Metrics()$metrics %>% as.data.frame() %>% dplyr::select(counting_method,
Metric, Value, lower, upper) %>% dplyr::filter(Metric %in%
c("Prop.Const.x", Metrics()$metrics_to_plot))
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
Metrics()$metrics %>% head()
Metrics()$metrics %>% select(Metric) %>% unique()
?grepl
grep("[a-z]", letters)
letters
grepl("[a-z]", letters)
grepl(c('a','b'), c('a'))
grepl(c('a','b','c'), c('a'))
grep(c('a','b','c'), c('a'))
grep(c('a'),c('a','b','c'))
grepl(c('a'),c('a','b','c'))
?gsub
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
?round
runApp('CellCounting/AppV1/Shiny app.R')
numsig(.00023,2)
signif(.00023,2)
signif(2.0,2)
sapply(1:10, mean)
?sapply
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
runApp('CellCounting/AppV1/Shiny app.R')
library(shiny)
?fileInput
runApp('Charpy/CharpyClone/charpyapp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?selectInput
?sliderInput
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
install.packages('shinythemes')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?checkboxGroupInput
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?conditionalPanel
?checkboxInput
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?checkboxInput
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?conditionalPanel
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?checkboxGroupInput
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
checkboxGroupInput()
checkboxGroupInput('hello')
checkboxGroupInput('hello','hello')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp')
?conditionalPanel
?selectInput
runApp('Charpy/CharpyClone/charpyapp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp')
c(x=1)
x = c(a=1)
x
x$a
x['a']
checkboxGroupInput()
?checkboxGroupInput
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?actionButton
?eventReactive
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
list(x=1)
?selectInput
?fileInput
?source
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?tableOutput
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?fileInput
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
dataset
colnames(dataset)
?read.csv
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
dataset
getwd()
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
dataset
input$datafile
myd = read.csv('C:\\Users\\dtn1\\AppData\\Local\\Temp\\RtmpEleClL/53dac015f7f070dbb7e3f25b/0.csv')
myd
dim(myd)
class(mydf)
class(myd)
myd$ï..temperature
myd$temperature
library(tidyverse)
?read_csv
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
dataset
dataset$temperature
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
names(list(x=1,y=4))
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
list.files('R')
setwd("~/Charpy/CharpyClone/charpyapp/CharpyApp")
list.files('R')
runApp()
runApp()
runApp()
getwd()
getwd()
list.files('R')
runApp()
runApp()
source('R/inputModule.R')
source('R/plotModules.R')
#source('R/utils.R')
source('R/functions_4_more_fun_v12.R')
runApp()
shiny::runApp()
traceback
traceback()
runApp()
runApp()
getwd()
runApp(getwd())
shiny::runApp()
runApp()
